import { PrismaClient } from '@prisma/client';
import { logger } from '../utils/logger';

const prisma = new PrismaClient();

/**
 * Script para eliminar categor√≠as sin productos asociados
 * Este script identifica y elimina todas las categor√≠as que no tienen
 * productos asociados actualmente en la base de datos.
 */
async function deleteEmptyCategories() {
  logger.info('üîç Iniciando b√∫squeda de categor√≠as sin productos...');

  try {
    // 1. Obtener todas las categor√≠as con conteo de productos
    const categoriesWithCount = await prisma.category.findMany({
      include: {
        _count: {
          select: { products: true }
        }
      }
    });

    // 2. Filtrar categor√≠as sin productos
    const emptyCategories = categoriesWithCount.filter(category => 
      category._count.products === 0
    );

    logger.info(`üìä Se encontraron ${emptyCategories.length} categor√≠as sin productos de un total de ${categoriesWithCount.length} categor√≠as`);

    if (emptyCategories.length === 0) {
      logger.info('‚úÖ No hay categor√≠as vac√≠as para eliminar');
      return { deleted: 0, message: 'No empty categories found' };
    }

    // 3. Mostrar las categor√≠as que se eliminar√°n
    logger.info('üóëÔ∏è Se eliminar√°n las siguientes categor√≠as:');
    emptyCategories.forEach(category => {
      logger.info(`   - ID: ${category.id}, T√≠tulo: "${category.title}"`);
    });

    // 4. Eliminar las categor√≠as vac√≠as
    const deleteIds = emptyCategories.map(cat => cat.id);
    
    const result = await prisma.category.deleteMany({
      where: {
        id: {
          in: deleteIds
        }
      }
    });

    logger.info(`‚úÖ Se eliminaron ${result.count} categor√≠as vac√≠as exitosamente`);
    return { deleted: result.count, message: `${result.count} empty categories deleted` };

  } catch (error) {
    logger.error('‚ùå Error al eliminar categor√≠as vac√≠as:', error as Error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script si se llama directamente
if (require.main === module) {
  deleteEmptyCategories()
    .then((result) => {
      logger.info(`‚úÖ Script completado con √©xito. ${result.deleted} categor√≠as eliminadas.`);
      process.exit(0);
    })
    .catch((error) => {
      logger.error('‚ùå Error ejecutando script:', error);
      process.exit(1);
    });
}

export default deleteEmptyCategories;
